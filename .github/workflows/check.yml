name: 'Check'

on:
  workflow_dispatch:
    inputs: 
      game:
        description: 'Select Game'
        required: true
        type: choice
        options:
          - palworld
          - enshrouded

  repository_dispatch:
    types:
      [test]

permissions:
  contents: read

jobs:
  terraform_AWS:
    runs-on: ubuntu-latest
    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_DEFAULT_REGION: "ap-southeast-2"
      TF_VAR_my_ip: ${{ secrets.MY_IP }}
      TF_VAR_server_password: ${{ secrets.SERVER_PASSWORD }}
      TF_VAR_discord_webhook: ${{ secrets.DISCORD_WEBHOOK }}
      TF_VAR_game: ${{ github.event.client_payload.game || 'palworld' }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    # Echo test value
    - name: Echo
      run: |
        echo "${{ env.TF_VAR_game }}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./Infra
      run: |
        terraform init -backend-config="backend.hcl"

    # Generates an execution plan for Terraform
    - name: Terraform Plan AWS
      working-directory: ./Infra
      run: terraform plan