name: 'Store'

on:
  workflow_dispatch:
    inputs: 
      game:
        description: 'Select Game'
        required: true
        type: choice
        options:
          - palworld
          - enshrouded

  repository_dispatch:
    types: [store]    

permissions:
  contents: read

jobs:
  terraform_AWS:
    runs-on: ubuntu-latest
    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_DEFAULT_REGION: "ap-southeast-2"
      TF_VAR_my_ip: ${{ secrets.MY_IP }}
      TF_VAR_game: ${{ github.event.client_payload.game || github.event.inputs.game}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: Infra
      run: |
        terraform init \
        -backend-config="backend.hcl" \
        -backend-config="key=state/game_servers/${{ github.ref == 'refs/heads/main' && '' || 'dev/' }}${{ env.TF_VAR_game }}/infra.tfstate"

    # Applies Terraform config - Required here to update runner_ip firewall rule
    - name: Terraform Apply
      working-directory: ./Infra
      run: | 
        terraform apply -auto-approve
        terraform refresh

    - name: Prepare key file and set some variables
      working-directory: ./Infra
      run: |
        echo "$(terraform output secret_key)" >> ../Docker/id_rsa
        chmod 0400 ../Docker/id_rsa
        echo "TF_VAR_instance_ip=$(terraform output instance_ip | sed 's/"//g')" >> $GITHUB_ENV     
        echo "PRICE=$(terraform state pull |  curl -s -X POST -H "Content-Type: application/json" -d @- https://cost.modules.tf/ | cut -d' ' -f2 | cut -d',' -f1 )" >> $GITHUB_ENV

#PALWORLD

    - name: Place game files
      if: env.TF_VAR_game == 'palworld'
      run: |
        mkdir -p palworld/Pal/Saved/SaveGames
        mkdir -p palworld/Pal/Saved/Config/LinuxServer
        rsync -ur -e "ssh -o StrictHostKeyChecking=no -i ./Docker/id_rsa" ubuntu@${{ env.TF_VAR_instance_ip }}:/data/Pal/Saved/SaveGames/ palworld/Pal/Saved/SaveGames/
        rsync -u -e "ssh -o StrictHostKeyChecking=no -i ./Docker/id_rsa" ubuntu@${{ env.TF_VAR_instance_ip }}:/data/Pal/Saved/Config/LinuxServer/GameUserSettings.ini palworld/Pal/Saved/Config/LinuxServer/

#ENSHROUDED

    - name: Place game files
      if: env.TF_VAR_game == 'enshrouded'
      run: |
        mkdir -p enshrouded
        rsync -ur -e "ssh -o StrictHostKeyChecking=no -i ./Docker/id_rsa" ubuntu@${{ env.TF_VAR_instance_ip }}:/data/ enshrouded/

    - name: Copy game files to S3
      run: |
        aws s3 sync ./${{ env.TF_VAR_game }} s3://game-files-maximumpigs/${{ github.ref == 'refs/heads/main' && '' || 'dev/' }}${{ env.TF_VAR_game }}/
        rm -r ${{ env.TF_VAR_game }}


    - name: Discord Webhook Action
      if: github.ref == 'refs/heads/main'
      uses: tsickert/discord-webhook@v5.3.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
        content: "${{ env.TF_VAR_game }} server files saved"

    # Removes Github Runner access
    - name: Terraform Apply AWS
      working-directory: Infra
      run: |
        terraform apply -auto-approve \
        -var='runner_access_enabled=false'        