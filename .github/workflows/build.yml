name: 'Apply'

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform_AWS:
    name: 'Apply_AWS'
    runs-on: ubuntu-latest
    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_my_ip: ${{ secrets.MY_IP }}
    outputs:
      instance_ip: ${{ steps.AWS_Apply.outputs.instance_ip }}
      secret_key_id: ${{ steps.AWS_Apply.outputs.secret_key }}  

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init AWS
      working-directory: ./Infra
      run: terraform init -backend-config="backend.hcl"

    # Generates an execution plan for Terraform
    - name: Terraform Apply AWS
      id: AWS_Apply
      working-directory: ./Infra
      run: terraform apply -auto-approve -backend-config="backend.hcl"

  terraform_Docker:
    name: 'Apply_Docker'
    runs-on: ubuntu-latest
    needs: terraform_AWS
    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      TF_VAR_instance_ip: ${{ needs.terraform_AWS.outputs.instance_ip }}
      TF_VAR_secret_key: ${{ needs.terraform_AWS.outputs.secret_key }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init Docker
      working-directory: ./Docker
      run: terraform init -backend-config="backend.hcl"

    # Generates an execution plan for Terraform
    - name: Terraform Apply Docker
      working-directory: ./Docker
      run: terraform apply -auto-approve -backend-config="backend.hcl"

