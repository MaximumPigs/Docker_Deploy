name: 'Apply'

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  terraform_AWS:
    runs-on: ubuntu-latest
    env: 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
      AWS_DEFAULT_REGION: "ap-southeast-2"
      TF_VAR_my_ip: ${{ secrets.MY_IP }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_wrapper: false

    # Install AWS CLI
    # - uses: aws-actions/setup-sam@v2    

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: Infra
      run: |
        terraform init -backend-config="backend.hcl"

    # Applies Terraform config
    - name: Terraform Apply AWS
      working-directory: Infra
      run: |
        terraform apply -auto-approve
        terraform refresh

    - name: Variables AWS
      working-directory: Infra
      run: |
        ls ../Docker/id_rsa
        echo "$(terraform output secret_key)" >> ../Docker/id_rsa
        chmod 0400 ../Docker/id_rsa
        echo "TF_VAR_instance_ip=$(terraform output instance_ip | sed 's/"//g')" >> $GITHUB_ENV
        sleep 60s

    - name: Create folders on remote host
      run: |
        ssh ubuntu@${{ env.TF_VAR_instance_ip }} -i Docker/id_rsa -o StrictHostKeyChecking=no 'mkdir -p /data/Pal/Saved/SaveGames'

    - name: Copy game files from S3
      run: |
        aws s3 cp s3://game-files-maximumpigs/palworld/Pal/Saved/SaveGames ./SaveGames --recursive
        ls -laR SaveGames

    - name: Place game files
      run: |
        scp -r -i ./Docker/id_rsa -o StrictHostKeyChecking=no ./SaveGames/* ubuntu@${{ env.TF_VAR_instance_ip }}:/data/Pal/Saved/SaveGames
        ssh ubuntu@${{ env.TF_VAR_instance_ip }} -i Docker/id_rsa -o StrictHostKeyChecking=no 'sudo chmod -R 777 /data && ls -laR /data/Pal/Saved/SaveGames'
        rm -r SaveGames/*

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init Docker
      working-directory: Docker
      run: terraform init -backend-config="backend.hcl"

    # Generates an execution plan for Terraform
    - name: Terraform Apply Docker
      working-directory: Docker
      run: terraform apply -auto-approve

    # Gets Terraform state and generates cost using cost.modules.tf
    - name: Terraform Get Cost AWS
      working-directory: Infra
      run: 'terraform state pull |  curl -s -X POST -H "Content-Type: application/json" -d @- https://cost.modules.tf/ >> $GITHUB_STEP_SUMMARY'